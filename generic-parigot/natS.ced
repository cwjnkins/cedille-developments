import natFunctor.

module NatS.

import scott as S ·NatF NatFmap -NatFmapId -NatFmapCompose.

NatS ◂ ★ = S.S.

Z ◂ NatS
= S.in (in1 unit).

S ◂ NatS ➔ NatS
= λ n. S.in (in2 n).

natSCase ◂ NatS ➔ ∀ X: ★. X ➔ (NatS ➔ X) ➔ X
= λ n. Λ X. λ z. λ s.
  (S.unfoldS n).1.1 (λ d. rec-Sum d (λ _. z) (λ p. s p)).

predS : NatS ➔ NatS
= λ n. natSCase n n (λ n. n).

natSInd : ∀ P: NatS ➔ ★. P Z ➔ (Π n: NatS. P (S n)) ➔ Π n: NatS. P n
= Λ P. λ z. λ s. λ n.
  S.inductionS ·P
    (λ fn. ind-Sum fn ·(λ x: NatF ·NatS. P (S.in x))
             (λ a. ρ (eta-Unit a) - z)
             (λ m. s m))
    n.

{-
U : ★ ➔ ★
= λ P: ★. ∀ Y: ★. Y ➔ NatS ➔ P.

T : ★ ➔ ★
= λ P: ★. ∀ Y: ★. (Y ➔ U ·P ➔ Y ➔ NatS ➔ P) ➔ Y ➔ NatS ➔ P.

NatR : ★ = ∀ P: ★. T ·P ➔ U ·P ➔ T ·P ➔ NatS ➔ P.

zeroR : NatR
= Λ P. λ t1. λ u. λ t2. λ n. u t2 n.

succR : NatR ➔ NatR
= λ n. Λ P. λ t1. λ u. λ t2. λ m. t1 (n ·P) t2 m.

zeta : ∀ P: ★. P ➔ U ·P
= Λ P. λ a. Λ Y. λ r. λ q. a.

delta : ∀ P: ★. P ➔ (NatS ➔ P ➔ P) ➔ T ·P
= Λ P. λ a. λ f. Λ Y. λ p. λ r. λ q. f (predS q) (p r (zeta a) r q).

-- natRec : ∀ P: ★. P ➔ (NatS ➔ P ➔ P) ➔ NatS ➔ P
-- = Λ P. λ a. λ f. λ n.
--   (χ NatR - natSCase n zeroR ●) (delta a f) (zeta a) (delta a f) n.
